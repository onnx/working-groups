(* ONNX driver extensions for OCaml extraction *)

module int.Int
  syntax type int      "int"
  syntax literal int   "%1"
  syntax val zero      "0"
  syntax val one       "1"
  syntax val      ( + )     "%1 + %2"   prec 8 8 7
  syntax val      ( - )     "%1 - %2"   prec 8 8 7
  syntax val      (-_)      "- %1"      prec 5 4
  syntax val      ( * )     "%1 * %2"   prec 7 7 6
  syntax val      (=)       "%1 = %2"   prec 11 11 10
  syntax val      (<=)      "%1 <= %2"  prec 11 11 10
  syntax val      (<)       "%1 < %2"   prec 11 11 10
  syntax val      (>=)      "%1 >= %2"  prec 11 11 10
  syntax val      (>)       "%1 > %2"   prec 11 11 10
end

module list.Length
  syntax val length "(List.length %1)"
end

module map.Map
  syntax type map      "%1 -> %2"
  syntax val  get      "%1 %2"
  syntax val  ([])     "%1 %2"
  syntax val  set      "(fun _x -> if _x = %2 then %3 else %1 _x)"
  syntax val  ([<-])   "(fun _x -> if _x = %2 then %3 else %1 _x)"
end

module map.Const
  syntax val const     "(fun _ -> %1)"
end

module utils.Same
  syntax val same      "(ignore %2 ; %1)"
end
